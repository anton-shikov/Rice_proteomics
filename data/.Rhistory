theme(axis.text.y = element_text(color='black',
size=12),
axis.title.y=element_text(color="black",
size=16),
panel.background = element_blank(),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(color='black',
size=12),
axis.title.x = element_text( color="black",
size=16)
)
#k-means clustering
shoots_kmeans <- kmeans(sc_shoots,centers=2)
shoots_kmeans$cluster
sc_shoots$name=rownames(sc_shoots)
#k-means visualization
autoplot(shoots_kmeans,
data=sc_shoots, label = TRUE,frame = TRUE,
frame.type = 'norm',label.size = 6,label.col='black',alpha=0)+
scale_colour_manual(values = c('black','black','black'))+
scale_fill_manual(values = c("#A9A9A9","#A60B0B",'red'))+
theme_bw()+
theme(axis.text.y = element_text(color='black',
size=24),
axis.title.y=element_text(color="black",
size=28),
panel.background = element_blank(),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(color='black',
size=24),
axis.title.x = element_text(color="black",
size=28),
legend.position = 'none'
) +
scale_x_continuous(expand = c(.1, .1))
clusterCut <-shoots_kmeans$cluster
names_frame <- data.frame(keyName=names(clusterCut), value=clusterCut, row.names=NULL) %>% arrange(value)
colnames(names_frame) <- c('Spot', 'Cluster')
names_frame$Control <- 0
names_frame$Anoxia <- 0
names_frame$Reaeration <- 0
names_frame$Annotation <- 0
names_frame$Accession <- 0
for (ind in 1:nrow(names_frame)){
normalized_row <- c()
normalized_row <- redone_shoots_normalized[redone_shoots_normalized$spot_num==names_frame[ind, 1], -1]
names_frame[ind, 3] <- mean(as.numeric(normalized_row[4:5]))
names_frame[ind, 4] <- mean(as.numeric(normalized_row[1:3]))
names_frame[ind, 5] <- mean(as.numeric(normalized_row[6:7]))
names_frame[ind, 6] <- normalized_row[9]
names_frame[ind, 7] <- normalized_row[10]
}
write.xlsx(names_frame,'kmeans_clusters_shoot_all.xlsx')
#K-means signif spots
sc_shoots<-data.frame(signif_pval_shoots[2:8])
#elbow method visualization
wss <- (nrow(sc_shoots)-1)*sum(apply(sc_shoots,2,var))
for (i in 1:4) wss[i] <- sum(kmeans(sc_shoots,
centers=i)$withinss,nstart=25,iter.max=1000)
wss_gf=data.frame(clust=c(1:4), wss=wss)
ggplot(wss_gf, aes(clust,wss))+
geom_line()+theme_bw()+ xlab('Number of clusters') + ylab('WSS')+
geom_vline(xintercept =2, linetype="dashed")+
theme(axis.text.y = element_text(color='black',
size=12),
axis.title.y=element_text(color="black",
size=16),
panel.background = element_blank(),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(color='black',
size=12),
axis.title.x = element_text( color="black",
size=16)
)
#k-means clustering
shoots_kmeans <- kmeans(sc_shoots,centers=2)
shoots_kmeans$cluster
sc_shoots$name=rownames(sc_shoots)
#k-means visualization
autoplot(shoots_kmeans,
data=sc_shoots, label = TRUE,frame = TRUE,
frame.type = 'norm',label.size = 6,label.col='black',alpha=0)+
scale_colour_manual(values = c('black','black','black'))+
scale_fill_manual(values = c("#A9A9A9","#A60B0B",'red'))+
theme_bw()+
theme(axis.text.y = element_text(color='black',
size=24),
axis.title.y=element_text(color="black",
size=28),
panel.background = element_blank(),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(color='black',
size=24),
axis.title.x = element_text(color="black",
size=28),
legend.position = 'none'
) +
scale_x_continuous(expand = c(.1, .1))
clusterCut <- shoots_kmeans$cluster
names_frame <- data.frame(keyName=names(clusterCut), value=clusterCut, row.names=NULL) %>% arrange(value)
colnames(names_frame) <- c('Spot', 'Cluster')
names_frame$Control <- 0
names_frame$Anoxia <- 0
names_frame$Reaeration <- 0
names_frame$Annotation <- 0
names_frame$Accession <- 0
for (ind in 1:nrow(names_frame)){
normalized_row <- c()
normalized_row <- signif_pval_shoots[signif_pval_shoots$spot_num==names_frame[ind, 1], -1]
names_frame[ind, 3] <- mean(as.numeric(normalized_row[4:5]))
names_frame[ind, 4] <- mean(as.numeric(normalized_row[1:3]))
names_frame[ind, 5] <- mean(as.numeric(normalized_row[6:7]))
names_frame[ind, 6] <- normalized_row[9]
names_frame[ind, 7] <- normalized_row[10]
}
write.xlsx(names_frame,'kmeans_clusters_shoot_signif.xlsx')
#K-means annot spots
sc_shoots<-data.frame(annotation_shoots_annot[2:8])
#elbow method visualization
wss <- (nrow(sc_shoots)-1)*sum(apply(sc_shoots,2,var))
for (i in 1:4) wss[i] <- sum(kmeans(sc_shoots,
centers=i)$withinss,nstart=25,iter.max=1000)
wss_gf=data.frame(clust=c(1:4), wss=wss)
ggplot(wss_gf, aes(clust,wss))+
geom_line()+theme_bw()+ xlab('Number of clusters') + ylab('WSS')+
geom_vline(xintercept =2, linetype="dashed")+
theme(axis.text.y = element_text(color='black',
size=12),
axis.title.y=element_text(color="black",
size=16),
panel.background = element_blank(),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(color='black',
size=12),
axis.title.x = element_text( color="black",
size=16)
)
#k-means clustering
shoots_kmeans <- kmeans(sc_shoots,centers=2)
shoots_kmeans$cluster
sc_shoots$name=rownames(sc_shoots)
#k-means visualization
autoplot(shoots_kmeans,
data=sc_shoots, label = TRUE,frame = TRUE,
frame.type = 'norm',label.size = 6,label.col='black',alpha=0)+
scale_colour_manual(values = c('black','black','black'))+
scale_fill_manual(values = c("#A9A9A9","#A60B0B",'red'))+
theme_bw()+
theme(axis.text.y = element_text(color='black',
size=24),
axis.title.y=element_text(color="black",
size=28),
panel.background = element_blank(),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(color='black',
size=24),
axis.title.x = element_text(color="black",
size=28),
legend.position = 'none'
) +
scale_x_continuous(expand = c(.1, .1))
clusterCut <- shoots_kmeans$cluster
names_frame <- data.frame(keyName=names(clusterCut), value=clusterCut, row.names=NULL) %>% arrange(value)
colnames(names_frame) <- c('Spot', 'Cluster')
names_frame$Control <- 0
names_frame$Anoxia <- 0
names_frame$Reaeration <- 0
names_frame$Annotation <- 0
names_frame$Accession <- 0
for (ind in 1:nrow(names_frame)){
normalized_row <- c()
normalized_row <- annotation_shoots_annot[annotation_shoots_annot$spot_num==names_frame[ind, 1], -1]
names_frame[ind, 3] <- mean(as.numeric(normalized_row[4:5]))
names_frame[ind, 4] <- mean(as.numeric(normalized_row[1:3]))
names_frame[ind, 5] <- mean(as.numeric(normalized_row[6:7]))
names_frame[ind, 6] <- normalized_row[9]
names_frame[ind, 7] <- normalized_row[10]
}
write.xlsx(names_frame,'kmeans_clusters_shoot_annot.xlsx')
#K-means signif annot spots
sc_shoots<-data.frame(annotated_sigif_shoots[2:8])
#elbow method visualization
wss <- (nrow(sc_shoots)-1)*sum(apply(sc_shoots,2,var))
for (i in 1:4) wss[i] <- sum(kmeans(sc_shoots,
centers=i)$withinss,nstart=25,iter.max=1000)
wss_gf=data.frame(clust=c(1:4), wss=wss)
ggplot(wss_gf, aes(clust,wss))+
geom_line()+theme_bw()+ xlab('Number of clusters') + ylab('WSS')+
geom_vline(xintercept =2, linetype="dashed")+
theme(axis.text.y = element_text(color='black',
size=12),
axis.title.y=element_text(color="black",
size=16),
panel.background = element_blank(),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(color='black',
size=12),
axis.title.x = element_text( color="black",
size=16)
)
#k-means clustering
shoots_kmeans <- kmeans(sc_shoots,centers=2)
shoots_kmeans$cluster
sc_shoots$name=rownames(sc_shoots)
#k-means visualization
autoplot(shoots_kmeans,
data=sc_shoots, label = TRUE,frame = TRUE,
frame.type = 'norm',label.size = 6,label.col='black',alpha=0)+
scale_colour_manual(values = c('black','black','black'))+
scale_fill_manual(values = c("#A9A9A9","#A60B0B",'red'))+
theme_bw()+
theme(axis.text.y = element_text(color='black',
size=24),
axis.title.y=element_text(color="black",
size=28),
panel.background = element_blank(),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(color='black',
size=24),
axis.title.x = element_text(color="black",
size=28),
legend.position = 'none'
) +
scale_x_continuous(expand = c(.1, .1))
clusterCut <- shoots_kmeans$cluster
names_frame <- data.frame(keyName=names(clusterCut), value=clusterCut, row.names=NULL) %>% arrange(value)
colnames(names_frame) <- c('Spot', 'Cluster')
names_frame$Control <- 0
names_frame$Anoxia <- 0
names_frame$Reaeration <- 0
names_frame$Annotation <- 0
names_frame$Accession <- 0
for (ind in 1:nrow(names_frame)){
normalized_row <- c()
normalized_row <- annotated_sigif_shoots[annotated_sigif_shoots$spot_num==names_frame[ind, 1], -1]
names_frame[ind, 3] <- mean(as.numeric(normalized_row[4:5]))
names_frame[ind, 4] <- mean(as.numeric(normalized_row[1:3]))
names_frame[ind, 5] <- mean(as.numeric(normalized_row[6:7]))
names_frame[ind, 6] <- normalized_row[9]
names_frame[ind, 7] <- normalized_row[10]
}
write.xlsx(names_frame,'kmeans_clusters_shoot_signif_annot.xlsx')
###Dots types
root_sumary = data.frame(Spots=c("Annotated",'Signifficant',
'Annotated and Signifficant', 'Other'),
num=c(31,17,10,35))
shoot_sumary = data.frame(Spots=c("Annotated",'Signifficant',
'Annotated and Signifficant', 'Other'),
num=c(26,10,15,23))
ggplot(root_sumary, aes(x='',y=num,fill=Spots)) +
geom_bar(stat="identity", width=1, alpha=0.55, col='black')+
coord_polar(theta = "y")+
theme_bw()+
geom_text(aes(label = num),
position = position_stack(vjust = 0.5), size=10)+
geom_text(aes(label = num),
position = position_stack(vjust = 0.5), size=10)+
geom_text(aes(label = num),
position = position_stack(vjust = 0.5), size=10)+
scale_fill_manual(values = c("#a60b0b", '#2980b9', '#9A9EAB','#bdbd00'))+
scale_size(guide = 'none')+
theme( axis.text.x = element_blank(),
axis.title.x=element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
legend.title=element_text(face="bold",size=14),
legend.text=element_text(size=12),
axis.ticks = element_blank())+
guides(fill= guide_legend(title="Spot type"))
### ALL t.tests
anoxia_roots = redone_roots_log_reshaped[redone_roots_log_reshaped$factor_col=='Anoxia', 2] #19.8538 - anoxia
control_roots = redone_roots_log_reshaped[redone_roots_log_reshaped$factor_col=='Control', 2] #20.76237 - control
reaeration_roots <- redone_roots_log_reshaped[redone_roots_log_reshaped$factor_col=='Re-aeration', 2] #21.6658 - re-aeration
mean_OD_df_roots <- data.frame(Density = c(anoxia_roots, control_roots, reaeration_roots),
Condition=c(rep('anoxia_shoots',279),rep('control_shoots',279),rep('reaeration_shoots',279)))
anoxia_shoots = redone_shoots_log_reshaped[redone_shoots_log_reshaped$factor_col=='Anoxia', 2]  #19.11415 - anoxia
control_shoots = redone_shoots_log_reshaped[redone_shoots_log_reshaped$factor_col=='Control', 2] #20.38731 - control
reaeration_shoots <- redone_shoots_log_reshaped[redone_shoots_log_reshaped$factor_col=='Re-aeration', 2] #19.09779 - re-aeration
mean_OD_df_shoots <- data.frame(Density = c(anoxia_shoots, control_shoots, reaeration_shoots),
Condition=c(rep('anoxia_shoots',222),rep('control_shoots',148),rep('reaeration_shoots',148)))
t_test_df_all=data.frame(comparision=c("Anoxia_roots_vs_Control_roots","Anoxia_roots_vs_Re-aeration_roots", 'Control_roots_vs_Re-aeration_roots',
"Anoxia_shoots_vs_Control_shoots","Anoxia_shoots_vs_Re-aeration_shoots", 'Control_shots_vs_Re-aeration_shoots',
"Anoxia_roots_vs_Anoxia_shoots","Control_roots_vs_Control_shoots","Re-aeration_roots_vs_Re-aeration_shoots",
"Anoxia_roots_vs_Control_shoots","Anoxia_roots_vs_Re-aeration_shoots","Control_roots_vs_Re-aeration_shoots",
"Anoxia_shoots_vs_Control_roots","Anoxia_shoots_vs_Re-aeration_roots","Control_shoots_vs_Re-aeration_roots"
), p.value=1)
t_test_df_all[1, 2] <- t.test(anoxia_roots, control_roots)$p.value
t_test_df_all[2, 2] <- t.test(anoxia_roots, reaeration_roots)$p.value
t_test_df_all[3, 2] <- t.test(control_roots, reaeration_roots)$p.value
t_test_df_all[4, 2] <- t.test(anoxia_shoots, control_shoots)$p.value
t_test_df_all[5, 2] <- t.test(anoxia_shoots, reaeration_shoots)$p.value
t_test_df_all[6, 2] <- t.test(control_shoots, reaeration_shoots)$p.value
t_test_df_all[7, 2] <- t.test(anoxia_roots, anoxia_shoots)$p.value
t_test_df_all[8, 2] <- t.test(control_roots, control_shoots)$p.value
t_test_df_all[9, 2] <- t.test(reaeration_roots, reaeration_shoots)$p.value
t_test_df_all[10, 2] <- t.test(anoxia_roots, control_shoots)$p.value
t_test_df_all[11, 2] <- t.test(anoxia_roots, reaeration_shoots)$p.value
t_test_df_all[12, 2] <- t.test(control_roots, reaeration_shoots)$p.value
t_test_df_all[13, 2] <- t.test(anoxia_shoots, control_roots)$p.value
t_test_df_all[14, 2] <- t.test(anoxia_shoots, reaeration_shoots)$p.value
t_test_df_all[15, 2] <- t.test(control_shoots, reaeration_roots)$p.value
t_test_df_all$p.adj <- p.adjust(t_test_df_all$p.value, method = "fdr")
write.xlsx(t_test_df_all,'t_test_shoots_vs_roots.xlsx')
t.test(mean_OD_df_roots$Density, mean_OD_df_shoots$Density) #p-value < 2.2e-16
OD_organs_df <- data.frame(Density=c(mean_OD_df_roots$Density, mean_OD_df_shoots$Density),
factor_col=c(rep('roots',837), rep('shoots',518)))
#Mean OD violins for organs
ggplot(OD_organs_df, aes(y=Density, x=factor_col, fill=factor_col))+
geom_violin(alpha=0.9, color='black')+theme_bw()+
xlab('Condition') + ylab('Optical density')+
theme(axis.text.y = element_text(color='black',
size=16),
axis.title.y=element_text(color="black",
size=18),
panel.background = element_blank(),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(color='black',
size=16),
axis.title.x = element_text( color="black",
size=18),
legend.title=element_text(size=18),
legend.text=element_text(size=16)
)+
guides(fill = guide_legend(override.aes = list(size = 1),title="Condition"))
#redo functions
k_p_val <- function(x) { vals_df <- x %>% gather(condition, measurement, A1:R2, factor_key=TRUE)
vals_df$factor_col <- 'factor'
vals_df[grepl("A", vals_df$condition), 3] <- 'Anoxia'
vals_df[grepl("C", vals_df$condition), 3] <- 'Control'
vals_df[grepl("R", vals_df$condition), 3] <- 'Re-aeration'
tryCatch(kruskal.test(measurement ~ factor_col, data = vals_df)$p.value,
error = function(e) NA)
}
#mixed linear model function
lme_p_val <- function(x) { vals_df <- x %>% gather(condition, measurement, A1:R2, factor_key=TRUE)
vals_df$factor_col <- 'factor'
vals_df[grepl("A", vals_df$condition), 3] <- 'Anoxia'
vals_df[grepl("C", vals_df$condition), 3] <- 'Control'
vals_df[grepl("R", vals_df$condition), 3] <- 'Re-aeration'
fit.lme <- lme(measurement ~ factor_col, random=~1|condition, data=vals_df)
ret_vec <- c(as.data.frame(anova(fit.lme))$`p-value`[2])
fit_sum <- as.data.frame(summary(fit.lme)$tTable)
ret_vec <- c(ret_vec, fit_sum$`p-value`[c(2,3)])
tryCatch(ret_vec,
error = function(e) NA)
}
pvals_shoot_kraskell <- c()
pvals_shoot_lme <- data.frame(all_pval=c(1), cont_pval = c(1), re_pval = c(1))
#find p-vals for tests
for (i in 1:nrow(redone_shoots_normalized_no_rubisco)){
pvals_shoot_kraskell <- c(pvals_shoot_kraskell, k_p_val(redone_shoots_normalized_no_rubisco[i,2:8]))
pvals_shoot_lme <- rbind(pvals_shoot_lme, lme_p_val(redone_shoots_normalized_no_rubisco[i,2:8]))
}
pvals_shoot_lme <- pvals_shoot_lme[-1,]
#adjust p-values
pval_df_shoots=data_frame(spot=redone_shoots_normalized_no_rubisco[,1], kraskell_raw=pvals_shoot_kraskell,
kraskell_adj = p.adjust(pvals_shoot_kraskell, method = "fdr"),
lme_all_raw = pvals_shoot_lme[,1],
lme_all_adj = p.adjust(pvals_shoot_lme[,1], method = "fdr"),
lme_cont_raw = pvals_shoot_lme[,2],
lme_cont_adj = p.adjust(pvals_shoot_lme[,2], method = "fdr"),
lme_re_raw = pvals_shoot_lme[,3],
lme_re_adj = p.adjust(pvals_shoot_lme[,3], method = "fdr"))
#adjustment results
#FDR
sum(pval_df_shoots$kraskell_raw <= 0.05, na.rm = TRUE) #0 proteins with significant
sum(pval_df_shoots$lme_all_raw <= 0.05, na.rm = TRUE) #17 proteins with significant
sum(pval_df_shoots$lme_cont_raw <= 0.05, na.rm = TRUE) #12 proteins with significant
sum(pval_df_shoots$lme_re_raw <= 0.05, na.rm = TRUE) #15 proteins with significant
sum(pval_df_shoots$kraskell_adj <= 0.05, na.rm = TRUE) #0 proteins with significant
sum(pval_df_shoots$lme_all_adj <= 0.05, na.rm = TRUE) #5 proteins with significant
sum(pval_df_shoots$lme_cont_adj <= 0.05, na.rm = TRUE) #2 proteins with significant
sum(pval_df_shoots$lme_re_adj <= 0.05, na.rm = TRUE) #3 proteins with significant
#holm
sum(pval_df_shoots$kraskell_adj <= 0.05, na.rm = TRUE) #0 proteins with significant
sum(pval_df_shoots$lme_all_adj <= 0.05, na.rm = TRUE) #0 proteins with significant
sum(pval_df_shoots$lme_cont_adj <= 0.05, na.rm = TRUE) #0 proteins with significant
sum(pval_df_shoots$lme_re_adj <= 0.05, na.rm = TRUE) #0 proteins with significant
#BH
sum(pval_df_shoots$kraskell_adj <= 0.05, na.rm = TRUE) #0 proteins with significant
sum(pval_df_shoots$lme_all_adj <= 0.05, na.rm = TRUE) #0 proteins with significant
sum(pval_df_shoots$lme_cont_adj <= 0.05, na.rm = TRUE) #0 proteins with significant
sum(pval_df_shoots$lme_re_adj <= 0.05, na.rm = TRUE) #0 proteins with significant
#Modded_linear_model
shoot.fac <- data.frame(Condition=c('anoxia','anoxia','anoxia','control','control', 're-aeration', 're-aeration'))
rownames(shoot.fac) <- colnames( redone_shoots_normalized_no_rubisco[,-1])
rownames(redone_shoots_normalized_no_rubisco) <- gsub(" ", "_", redone_shoots_normalized_no_rubisco[,1])
X <- model.matrix(~ Condition, data = shoot.fac)
fit <- lmFit(redone_shoots_normalized_no_rubisco[,2:8], design = X, method = "robust", maxit = 10000)
efit <- eBayes(fit)
#modelled_p-values adjustment
num_spots <- nrow(redone_shoots_normalized_no_rubisco)
pval_df_shoots$eBayes_cont_raw <- topTable(efit, coef = 2, number = num_spots,
sort.by = "none")$P.Value
pval_df_shoots$eBayes_cont_adj <- topTable(efit, coef = 2, number = num_spots,
sort.by = "none")$adj.P.Val
pval_df_shoots$eBayes_re_raw <- topTable(efit, coef = 3, number = num_spots,
sort.by = "none")$P.Value
pval_df_shoots$eBayes_re_adj <- topTable(efit, coef = 3, number = num_spots,
sort.by = "none")$adj.P.Val
#the number of signifficant proteins
sum(pval_df_shoots$eBayes_cont_adj<=0.05) #14
sum(pval_df_shoots$eBayes_cont_raw<=0.05) #22
sum(pval_df_shoots$eBayes_re_adj<=0.05) #21
sum(pval_df_shoots$eBayes_re_raw<=0.05) #26
write.xlsx(pval_df,'dots_pvals_shoots.xlsx')
#extract significant spots
signif_pval_shoots <- redone_shoots_normalized_no_rubisco[pval_df_shoots$eBayes_cont_adj<=0.05 | pval_df_shoots$eBayes_re_adj<=0.05,]
rownames(signif_pval_shoots) <- redone_shoots_normalized_no_rubisco[pval_df_shoots$eBayes_cont_adj<=0.05 | pval_df_shoots$eBayes_re_adj<=0.05,9][-c(26,27)]
write.xlsx(signif_pval_shoots,'rice_shoots_signif_spots_annot.xlsx')
#K-means Clusters for significant points
sc_shoots<-data.frame(t(signif_pval_shoots[2:8]))
#elbow method visualization
wss <- (nrow(sc_shoots)-1)*sum(apply(sc_shoots,2,var))
for (i in 1:4) wss[i] <- sum(kmeans(sc_shoots,
centers=i)$withinss,nstart=25,iter.max=1000)
wss_gf=data.frame(clust=c(1:4), wss=wss)
ggplot(wss_gf, aes(clust,wss))+
geom_line()+theme_bw()+ xlab('Number of clusters') + ylab('WSS')+
geom_vline(xintercept =3, linetype="dashed")+
theme(axis.text.y = element_text(color='black',
size=12),
axis.title.y=element_text(color="black",
size=16),
panel.background = element_blank(),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(color='black',
size=12),
axis.title.x = element_text( color="black",
size=16)
)
#k-means clustering
shoots_kmeans <- kmeans(sc_shoots,centers=3)
shoots_kmeans$cluster
sc_shoots$name=rownames(sc_shoots)
#k-means visualization
autoplot(shoots_kmeans,
data=sc_shoots, label = TRUE,frame = TRUE,
frame.type = 'norm',label.size = 6,label.col='black',alpha=0)+
scale_colour_manual(values = c('black','black','black'))+
scale_fill_manual(values = c("#A9A9A9","#A60B0B",'red'))+
theme_bw()+
theme(axis.text.y = element_text(color='black',
size=24),
axis.title.y=element_text(color="black",
size=28),
panel.background = element_blank(),
axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(color='black',
size=24),
axis.title.x = element_text(color="black",
size=28),
legend.position = 'none'
) +
scale_x_continuous(expand = c(.1, .1))
rownames(signif_pval_shoots) <- signif_pval_shoots$spot_num
row_dend = as.dendrogram(hclust(dist((signif_pval_shoots[,2:8]))))
cluster_dend <- hclust(dist((signif_pval_shoots[,2:8])))
plot(cluster_dend)
clusterCut <- cutree(cluster_dend, k = 4)
names_frame <- data.frame(keyName=names(clusterCut), value=clusterCut, row.names=NULL) %>% arrange(value)
colnames(names_frame) <- c('Spot', 'Cluster')
names_frame$Control <- 0
names_frame$Anoxia <- 0
names_frame$Reaeration <- 0
names_frame$Annotation <- 0
names_frame$Accession <- 0
for (ind in 1:nrow(names_frame)){
normalized_row <- c()
normalized_row <- signif_pval_shoots[signif_pval_shoots$spot_num==names_frame[ind, 1], -1]
names_frame[ind, 3] <- mean(as.numeric(normalized_row[4:5]))
names_frame[ind, 4] <- mean(as.numeric(normalized_row[1:3]))
names_frame[ind, 5] <- mean(as.numeric(normalized_row[6:7]))
names_frame[ind, 6] <- normalized_row[9]
names_frame[ind, 7] <- normalized_row[10]
}
col_fun = colorRamp2(c(min(signif_pval_shoots[,2:8]),
max(signif_pval_shoots[,2:8])-min(signif_pval_shoots[,2:8])+4,
max(signif_pval_shoots[,2:8])), c("#746A20", "#F8F5EF", "#31860E"))
col_fun(seq(min(signif_pval_shoots[,2:8]),  max(signif_pval_shoots[,2:8])))
Heatmap(signif_pval_shoots[,2:8], name = "mat",
heatmap_width  = unit(15, "cm"), heatmap_height = unit(15, "cm"),
cluster_rows = row_dend,
row_names_gp = gpar(fontsize = 12),
column_names_gp = gpar(fontsize = 18),
col = col_fun)
